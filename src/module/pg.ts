import pg from 'pg'
import fs from 'fs'
import { ConnectionConfig, QueryArrayResult, QueryResult } from 'pg'
import chalk from 'chalk'
import type { Count } from './../../types/Count.js'

const options: ConnectionConfig = {
  host: 'rc1a-5unamtx70en7he58.mdb.yandexcloud.net',
  port: 6432,
  database: 'bots',
  user: 'administrator',
  password: 'fbF-Y8d-MF2-X4p',
  ssl: {
    rejectUnauthorized: true,
    ca: fs.readFileSync('certs/YandexInternalRootCA.crt').toString(),
  },
}

const db = new pg.Pool(options)

try {
  await db.connect()
} catch (err: any) {
  console.log(chalk.red('–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'), chalk.yellow(err.toString()))
}

/**
 ** –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–î
 * @function checkPhoneWhatsappDB
 * @param {number} phone - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const checkPhoneWhatsappDB = async (phone: number): Promise<number | boolean> => {
  const sql: string = `
    SELECT 
      COUNT(*) 
    FROM 
      whatsapp.checker
    WHERE phone = '${phone}'`

  try {
    const result = await db.query(sql)

    const row: Count = result.rows[0]
    return row.count
  } catch (err) {
    console.log('üöÄ -> checkPhoneWhatsappDB -> err:', err)
    return false
  }
}

/**
 ** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ë–î
 * @function insertCheckWhatsapp
 * @param {number} phone - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {boolean} status - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {string} instanceID - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
 */
export const insertCheckWhatsapp = async (phone: number, status: boolean, instanceID: string): Promise<boolean> => {
  const check = await checkPhoneWhatsappDB(phone)

  if (check === null) {
    return null
  }

  if (+check === 0) {
    try {
      const sql: string = `INSERT INTO whatsapp.checker(phone, instance, status) VALUES($1, $2, $3) RETURNING *`
      const obj: { phone: number; status: boolean; instance: string } = {
        phone: phone,
        instance: instanceID,
        status: status,
      }
      await db.query(sql, Object.values(obj))
      return true
    } catch (err) {
      return false
    }
  }
}
