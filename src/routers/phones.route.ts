import express from 'express'
import fs from 'fs'
import type { Router, Request, Response } from 'express'
import { DeviceADB } from '../../types/Devices.js'
import {
  killAppWhatsapp,
  killAppContact,
  getAllContacts,
  addContact,
  runWhatsapp,
  sendEventKey,
  getDevicesADB,
} from './../module/adb.js'
import { generateScripts } from './../module/run_py.js'
import { checkContact, validatePhone } from './../module/utils.js'
import { redis } from './../module/redis.js'
import moment from 'moment'

export const PhoneRouter: Router = express.Router()

/**
** –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É, —á—Ç–æ –æ–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ
* @function setFreeDevice
*/
const setFreeDevice = (devices: DeviceADB[], index: number): Promise<boolean> => {
  return new Promise(async (resolve, reject) => {
    try {
      devices[index].status = 'free'
      await fs.writeFileSync('./dist/devices.json', JSON.stringify(devices))
      resolve(true)
    } catch (err: any) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${err}`)
      reject(false)
    }
  })
}

/**
** –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ whatsapp
* @function checkWhatsapp
* @param {number} phone - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
*/
const checkWhatsapp = (phone: number): Promise<string | boolean> => {
  return new Promise(async (resolve, reject) => {
    try {
      const devicesStr: string = await fs.readFileSync('./dist/devices.json').toString()
      let devices: DeviceADB[] | any = JSON.parse(devicesStr) // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ADB
      console.log('üöÄ -> returnnewPromise -> devices:', devices)
      if (!devices.length) {
        devices = await getDevicesADB([])
      }
      
      if (devices && !devices?.length) {
        console.warn('–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ABD')
        reject('–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ADB')
      }
      
      const freeDevices: DeviceADB[] = devices.filter((el: DeviceADB) => el.status === 'free')
      console.log('üöÄ -> returnnewPromise -> freeDevices:', freeDevices)
      if (!freeDevices.length) {
        reject('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
      }
      
      const device = freeDevices[0] // —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å
      console.log('üöÄ -> returnnewPromise -> device:', device)
      const indexDevice: number = devices.findIndex((el: DeviceADB) => el.id === device.id) // –ò–Ω–¥–µ–∫—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      devices[indexDevice].status = 'wait' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–æ
      await fs.writeFileSync('./dist/devices.json', JSON.stringify(devices))
      
      await killAppWhatsapp(device).catch((err) => {
        setFreeDevice(devices, indexDevice)
        //reject(err)
      })
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ whatsapp')
      await killAppContact(device).catch((err) => {
        setFreeDevice(devices, indexDevice)
        //reject(err)
      })
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
      
      const contacts: any = await getAllContacts(device).catch((err) => {
        console.log('üöÄ -> returnnewPromise -> err:', err)
        setFreeDevice(devices, indexDevice)
        //reject(err)
      })
      console.log('contacts', contacts)
      
      if ((contacts && !contacts.length) || contacts.findIndex((el) => +el.number === +phone) === -1) {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞')
        await addContact(device, phone).catch((err) => {
          setFreeDevice(devices, indexDevice)
          //reject(err)
        })
      }
      
      await runWhatsapp(device).catch((err) => {
        setFreeDevice(devices, indexDevice)
        //reject(err)
      })
      console.log('–ó–∞–ø—É—Å–∫ –≤–∞—Ç—Å–∞–ø')
      await generateScripts('isCreate', device)
      
      await sendEventKey(String(phone), device) // –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ whatsapp
      
      const checkPhone: string = await generateScripts('isCheck', device) // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ whatsapp
      const check = checkContact(checkPhone)
      resolve(check)
    } catch (err: any) {
      reject(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ whatsapp: ${err}`)
    }
  })
}

/* –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ */
PhoneRouter.post('/check-whatsapp', async (req: Request, res: Response) => {
  const body: { phone: number } = req.body
  
  if (!body?.phone) {
    res.status(500).send('–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    return
  }
  
  if (!validatePhone(body.phone)) {
    res.status(500).send('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    return
  }
  
  const obj: {phone: number, date_add: string}  = {
    phone: body.phone,
    date_add: moment().format('YYYY-MM-DD HH:mm:ss')
  }
  
  try{
    await redis.lpush('queue_checker_whatsapp', JSON.stringify(obj))  
    res.status(200).send('ok')
  }
  catch(err:any){
    res.status(500).send(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: ${err}`)
  }
})


/* try {
console.time('check')
if (!body?.phone) {
res.status(500).send('–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
return 
}

const check = await checkWhatsapp(body.phone)
console.timeEnd('check')
res.status(200).send({ check })
} catch (err: any) {

res.send(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ whatsapp: ${err}`)
} */
